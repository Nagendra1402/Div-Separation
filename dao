


import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import oracle.jdbc.OracleTypes;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlOutParameter;

import com.pboadmin.beans.BeanFactory;
import com.pboadmin.beans.QueryParameterBean;
import com.pboadmin.utils.GenericMapper;
import com.pboadmin.utils.GenericResultSetExtractor;

@Repository
public class CommonDAO {
    
    protected JdbcTemplate jdbcTemplate;
    protected SimpleJdbcInsert simpleJdbcInsert;
    protected SimpleJdbcCall simpleJdbcCall;
    protected NamedParameterJdbcTemplate npJdbcTemplate;
    protected String defaultSchemaName = "PBDBO";
    
    @Autowired
    public void setSystemProperty(DataSource ds){
        System.setProperty("oracle.jdbc.J2EE13Compliant", "true");       
    }

    @Autowired
    public void setDataSource(DataSource ds){
        jdbcTemplate = new JdbcTemplate(ds);
        simpleJdbcInsert = new SimpleJdbcInsert(ds);
        simpleJdbcCall = new SimpleJdbcCall(ds);
        npJdbcTemplate = new NamedParameterJdbcTemplate(ds);
    }
    
    public <T> List<T> get(String query,BeanFactory<T> bf,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        return jdbcTemplate.query(query,gm);
    }
    
    public <T> List<T> get(String query,BeanFactory<T> bf,SqlParameterSource sps,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        return npJdbcTemplate.query(query,sps,gm);
    }
    
    public <T> List<T> get(String query,BeanFactory<T> bf,Object[] args,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        return jdbcTemplate.query(query,gm,args);
    }
    
    public <T> List<T> get(String query,Class<T> c,SqlParameterSource sps){             
        return npJdbcTemplate.queryForList(query, sps, c);
    }
    
    @SuppressWarnings("unchecked")
    public <T> List<T> get(String query,BeanFactory<T> bf,boolean isDataEncrypted,
            HashMap<String,QueryParameterBean> andMatchingQueryParamsMap, 
            HashMap<String,QueryParameterBean> orMatchingQueryParamsMap){
        GenericResultSetExtractor<T> grse = new GenericResultSetExtractor<T>();        
        grse.setBeanFactory(bf);
        grse.setDataEncrypted(isDataEncrypted);
        grse.setAndMatchingParams(andMatchingQueryParamsMap);
        grse.setOrMatchingParams(orMatchingQueryParamsMap);
        return (List<T>)jdbcTemplate.query(query,grse);
    }
    
    @SuppressWarnings("unchecked")
    public <T> List<T> get(String query,BeanFactory<T> bf,SqlParameterSource sps,
            boolean isDataEncrypted, HashMap<String,QueryParameterBean> andMatchingQueryParamsMap, 
            HashMap<String,QueryParameterBean> orMatchingQueryParamsMap){
        GenericResultSetExtractor<T> grse = new GenericResultSetExtractor<T>();        
        grse.setBeanFactory(bf);
        grse.setDataEncrypted(isDataEncrypted);
        grse.setAndMatchingParams(andMatchingQueryParamsMap);
        grse.setOrMatchingParams(orMatchingQueryParamsMap);
        return (List<T>)npJdbcTemplate.query(query,sps,grse);
    }
    
    @SuppressWarnings("unchecked")
    public <T> List<T> get(String query, BeanFactory<T> bf, Object[] args,
            boolean isDataEncrypted, HashMap<String,QueryParameterBean> andMatchingQueryParamsMap, 
            HashMap<String,QueryParameterBean> orMatchingQueryParamsMap){
        GenericResultSetExtractor<T> grse = new GenericResultSetExtractor<T>();        
        grse.setBeanFactory(bf);
        grse.setDataEncrypted(isDataEncrypted);
        grse.setAndMatchingParams(andMatchingQueryParamsMap);
        grse.setOrMatchingParams(orMatchingQueryParamsMap);
        return (List<T>)jdbcTemplate.query(query,grse,args);
    }
        
    public <T> T getObject(String query,BeanFactory<T> bf,SqlParameterSource sps,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        try{
            return npJdbcTemplate.queryForObject(query,sps,gm);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public <T> T getObject(String query,BeanFactory<T> bf,Object[] args,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        try{
            return jdbcTemplate.queryForObject(query,gm,args);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public <T> T getObject(String query,BeanFactory<T> bf,boolean isDataEncrypted){
        GenericMapper<T> gm = new GenericMapper<T>();        
        gm.setBeanFactory(bf);
        gm.setDataEncrypted(isDataEncrypted);
        try{
            return jdbcTemplate.queryForObject(query,gm);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public <T> T getObject(String query,Class<T> c,Object[] params){
        try{
            return (T)jdbcTemplate.queryForObject(query, c, params);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public <T> T getObject(String query,Class<T> c,SqlParameterSource sps){
        try{
            return npJdbcTemplate.queryForObject(query, sps, c);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public <T> T getObject(String query,Class<T> c){        
        try{
            return jdbcTemplate.queryForObject(query,c);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }
    
    public int get(String query){
        return jdbcTemplate.queryForInt(query);
    }
    
    public int get(String query,SqlParameterSource sps){
        return npJdbcTemplate.queryForInt(query,sps);
    }
    
    public int update(String query){
        return jdbcTemplate.update(query);
    }
    
    public int update(String query,SqlParameterSource sps){
        return npJdbcTemplate.update(query,sps);
    }
    
    public int update(String query,Map<String,?> paramMap){
        return npJdbcTemplate.update(query,paramMap);
    }
    
    public int[] batchUpdate(NamedParameterJdbcTemplate npJdbcTemplate,String query,List<?> objList){
        SqlParameterSource[] batch = SqlParameterSourceUtils.createBatch(objList.toArray());
        return npJdbcTemplate.batchUpdate(query, batch);
    }
    
    public int insert(SimpleJdbcInsert sji,Map<String,Object> map){
        return sji.execute(map);
    }
    
    public int insert(SimpleJdbcInsert sji,SqlParameterSource sps){
        return sji.execute(sps);
    }
    
    public long insertAndReturnId(SimpleJdbcInsert sji,Map<String,Object> map){        
            return sji.executeAndReturnKey(map).longValue();        
    }
    
	public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, Map<String, Object> map) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(defaultSchemaName);
		Map<String, Object> mp = simpleJdbcCall.execute(map);
		System.out.println("in Map method");

		for (Map.Entry<String, Object> entry : map.entrySet()) {
			System.out.println(entry.getKey() + "/" + entry.getValue());
		}

		System.out.println("after for loop");
		return mp;
	}

	public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, SqlParameterSource inSps) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(defaultSchemaName);
		return simpleJdbcCall.execute(inSps);
	}

	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, Map<String, Object> map, Class<T> returnType) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(defaultSchemaName);
		return simpleJdbcCall.executeFunction(returnType, map);
	}

	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, SqlParameterSource inSps, Class<T> returnType) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(defaultSchemaName);
		return simpleJdbcCall.executeFunction(returnType, inSps);
	}

	public Map<String, Object> callProcWithoutMetaData(
			SimpleJdbcCall simpleJdbcCall, String procedureName,
			SqlParameterSource inSps, String[] inParams, SqlParameter... sp) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(defaultSchemaName)
				.withoutProcedureColumnMetaDataAccess()
				.useInParameterNames(inParams).declareParameters(sp);
		return simpleJdbcCall.execute(inSps);
	}

	@SuppressWarnings("unchecked")
	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, Class<T> returnType, SqlParameterSource inSps) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(defaultSchemaName);
		return (T) simpleJdbcCall.execute(returnType, inSps);
	}

	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, BeanFactory<T> bf, String cursorName) {
		GenericMapper<T> gm = new GenericMapper<T>();
		gm.setBeanFactory(bf);
		gm.setDataEncrypted(false);
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(defaultSchemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, gm));
		Map<String, Object> hm = simpleJdbcCall.execute();
		return (ArrayList<T>) hm.get(cursorName);
	}

	public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, Map<String, Object> map, String schemaName) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(schemaName);
		return simpleJdbcCall.execute(map);
	}

	public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, SqlParameterSource inSps, String schemaName) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(schemaName);
		return simpleJdbcCall.execute(inSps);
	}

	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, Map<String, Object> map, Class<T> returnType,
			String schemaName) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(schemaName);
		return simpleJdbcCall.executeFunction(returnType, map);
	}

	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, SqlParameterSource inSps, Class<T> returnType,
			String schemaName) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(schemaName);
		return simpleJdbcCall.executeFunction(returnType, inSps);
	}

	public Map<String, Object> callProcWithoutMetaData(
			SimpleJdbcCall simpleJdbcCall, String procedureName,
			SqlParameterSource inSps, String[] inParams, String schemaName,
			SqlParameter... sp) {
		simpleJdbcCall = simpleJdbcCall.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.withoutProcedureColumnMetaDataAccess()
				.useInParameterNames(inParams).declareParameters(sp);
		return simpleJdbcCall.execute(inSps);
	}

	@SuppressWarnings("unchecked")
	public <T> T callFunction(SimpleJdbcCall simpleJdbcCall,
			String functionName, Class<T> returnType, SqlParameterSource inSps,
			String schemaName) {
		simpleJdbcCall = simpleJdbcCall.withFunctionName(functionName)
				.withSchemaName(schemaName);
		return (T) simpleJdbcCall.execute(returnType, inSps);
	}

	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, BeanFactory<T> bf, String cursorName,
			String schemaName) {
		GenericMapper<T> gm = new GenericMapper<T>();
		gm.setBeanFactory(bf);
		gm.setDataEncrypted(false);
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, gm));
		Map<String, Object> hm = simpleJdbcCall.execute();
		return (ArrayList<T>) hm.get(cursorName);
	}
	
	//-GeneriMapper with SqlParameterSource
	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, String cursorName, String schemaName,
			SqlParameterSource sps, BeanFactory<T> bf) {
		GenericMapper<T> gm = new GenericMapper<T>();
		gm.setBeanFactory(bf);
		gm.setDataEncrypted(false);
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, gm));
		Map<String, Object> hm = simpleJdbcCall.execute(sps);
		return (ArrayList<T>) hm.get(cursorName);
	}
	
	//-GenericMapper with Map
	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, String cursorName, String schemaName,
			Map<String, Object> map, BeanFactory<T> bf) {
		GenericMapper<T> gm = new GenericMapper<T>();
		gm.setBeanFactory(bf);
		gm.setDataEncrypted(false);
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, gm));
		Map<String, Object> hm = simpleJdbcCall.execute(map);
		return (ArrayList<T>) hm.get(cursorName);

	}
	
	//-RowMapper with SqlParameterSource and multiple cursors / output params
		@SuppressWarnings("unchecked")
		public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
				String procedureName, List<SqlOutParameter> sqlOutParamList, String cursorName,
				String schemaName, SqlParameterSource sps) {		
			
			simpleJdbcCall = simpleJdbcCall
					.withProcedureName(procedureName)
					.withSchemaName(schemaName);			
			Iterator<SqlOutParameter> it = sqlOutParamList.iterator();
			while (it.hasNext()){
				simpleJdbcCall = simpleJdbcCall.declareParameters(it.next());
			}			
					
			Map<String, Object> hm = simpleJdbcCall.execute(sps);
			return hm;
		}
		
		//-RowMapper with map and multiple cursors / output params
		@SuppressWarnings("unchecked")
		public Map<String, Object> callProc(SimpleJdbcCall simpleJdbcCall,
				String procedureName, List<SqlOutParameter> sqlOutParamList,
				String schemaName, Map<String, Object> map) {
			simpleJdbcCall = simpleJdbcCall
					.withProcedureName(procedureName)
					.withSchemaName(schemaName);
			
			Iterator<SqlOutParameter> it = sqlOutParamList.iterator();
			while (it.hasNext()){
				simpleJdbcCall = simpleJdbcCall.declareParameters(it.next());
			}
			Map<String, Object> hm = simpleJdbcCall.execute(map);
			return hm;

		}
	
	//-RowMapper with SqlParameterSource
	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, RowMapper<T> rm, String cursorName,
			String schemaName, SqlParameterSource sps) {
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, rm));
		Map<String, Object> hm = simpleJdbcCall.execute(sps);
		return (ArrayList<T>) hm.get(cursorName);
	}
	
	//-RowMapper with map
	@SuppressWarnings("unchecked")
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, RowMapper<T> rm, String cursorName,
			String schemaName, Map<String, Object> map) {
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR, rm));
		Map<String, Object> hm = simpleJdbcCall.execute(map);
		return (ArrayList<T>) hm.get(cursorName);

	}
	
	//-BeanPropertyRowMapper with SqlParameterSource
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, BeanFactory<T> bf, String cursorName,
			String schemaName, SqlParameterSource sps) {
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR,
								new BeanPropertyRowMapper(bf.getClass())));
		Map<String, Object> hm = simpleJdbcCall.execute(sps);
		return (ArrayList<T>) hm.get(cursorName);
	}
	
	//-BeanPropertyRowMapper with Map
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public <T> ArrayList<T> callProc(SimpleJdbcCall simpleJdbcCall,
			String procedureName, BeanFactory<T> bf, String cursorName,
			String schemaName, Map<String, Object> map) {
		simpleJdbcCall = simpleJdbcCall
				.withProcedureName(procedureName)
				.withSchemaName(schemaName)
				.declareParameters(
						new SqlOutParameter(cursorName, OracleTypes.CURSOR,
								new BeanPropertyRowMapper(bf.getClass())));
		Map<String, Object> hm = simpleJdbcCall.execute(map);
		return (ArrayList<T>) hm.get(cursorName);
	}
}
